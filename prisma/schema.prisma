// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//======All enum ======

enum UserRole {
  USER
  PREMIUM
  ADMIN
}

enum ClipStatus {
  PENDING
  DOWNLOADING
  PROCESSING
  AI_ANALYZING
  RENDERING
  UPLOADING
  COMPLETED
  FAILED
  CANCELED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
  CANCELED
}

enum JobType {
  YOUTUBE_DOWNLOAD
  VIDEO_PROCESS
  AI_TRANSCRIPTION
  AI_SCENE_DETECTION
  AI_HIGHLIGHT_EXTRACTION
  VIDEO_UPLOAD
  EMAIL_SEND
  CLEANUP
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  MAGIC_LINK
}

//========Enum end =======/

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String?
  firstName       String
  lastName        String
  avatar          String?
  role            UserRole  @default(USER)
  isActive        Boolean   @default(true)
  isEmailVerified Boolean   @default(false)
  emailVerifiedAt DateTime?

  googleId         String? @unique
  youtubeChannelId String?

  emailVerificiationToken String?
  passwordResetToken      String?
  passwordResetExpires    DateTime?

  template    Template[]
  preferences Json?

  clips         MakeClip[]
  subscriptions Subscription?
  usage         Usage[]
  // sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("users")
}

// model Session {
//   id        String   @id @default(cuid())
//   userId    String
//   token     String   @unique
//   expiresAt DateTime

//   isActive  Boolean @default(true)
//   ipAddress String?
//   userAgent String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("sessions")
// }

model MakeClip {
  id                  String @id @default(cuid())
  videoSourceInNumber Int
  videoSourceInName   String // e.g. 'youtube', 'upload', etc.
  videoUrl            String
  clipCount           Int    @default(1)
  perClipDuration     Int
  creditUsed          Int    @default(0)

  duration Int?    @default(0)
  langCode String? // detected language of the video
  prompt   String? // user input prompt for AI analysis
  metadata Json? //AI analysis results

  userId String

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId Int
  template   Template @relation(fields: [templateId], references: [id])
  // segments ClipSegment[]
  // jobs     Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ClipSegment ClipSegment[]
  // Job         Job[]

  @@map("clips")
}

model Template {
  id           Int      @id @default(autoincrement())
  userId       String
  templateName String
  platform     String
  aspectRatio  String
  overlayLogo  String?
  introVideo   String
  outroVideo   String
  isActive     Boolean  @default(true)
  isDeleted    Boolean  @default(false)
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  MakeClip MakeClip[]

  @@map("templates")
}

// Clip segments (for multi-segment clips)
// model ClipSegment {
//   id          String  @id @default(cuid())
//   clipId      String
//   startTime   Int
//   endTime     Int
//   title       String?
//   description String?
//   confidence  Float?

//   clip MakeClip @relation(fields: [clipId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("clip_segments")
// }

// model Job {
//   id       String    @id @default(cuid())
//   type     JobType
//   status   JobStatus @default(PENDING)
//   priority Int       @default(0)

//   data     Json
//   result   Json?
//   error    String?
//   progress Float   @default(0)

//   startedAt   DateTime?
//   completedAt DateTime?
//   failedAt    DateTime?

//   attempts    Int @default(0)
//   maxAttempts Int @default(5)

//   clipId String?
//   clip   MakeClip? @relation(fields: [clipId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("jobs")
// }

model Subscription {
  id     String           @id @default(cuid())
  userId String           @unique
  plan   SubscriptionPlan

  status SubscriptionStatus

  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?

  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  monthlyClipLimit    Int @default(5)
  monthlyMinutesLimit Int @default(60)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Usage {
  id     String @id @default(cuid())
  userId String
  month  Int
  year   Int

  clipsCreated Int @default(0)
  clipsEdited  Int @default(0)
  clipsDeleted Int @default(0)

  minutesProcessed Int @default(0)
  apiCalls         Int @default(0)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month, year])
  @@map("usage")
}

model Token {
  id        String    @id @default(cuid())
  token     String    @unique
  type      TokenType
  userId    String?
  email     String?
  expiresAt DateTime
  usedAt    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tokens")
}
